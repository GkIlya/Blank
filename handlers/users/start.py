from aiogram.dispatcher import FSMContext

from filters.fil import Admin
from keyboard.inline.buttons import *
from loader import dp
from aiogram import types
from aiogram.types import ParseMode


##########################################################################


@dp.message_handler(Admin(), commands=["allacc"])
async def get_accs(message: types.Message, state: FSMContext):
    all_accounts = get_all_account()
    msg = """"""
    for acc in all_accounts:
        msg += f"call: {acc[0]}\nname: \"{acc[2]}\"\nprice: {acc[1]}—Ä—É–±\n\n"
    await message.answer(msg)


@dp.message_handler(Admin(), commands=["alluser"])
async def get_userss(message: types.Message):
    all_users = get_all_users()
    await message.answer(all_users)


@dp.message_handler(Admin(), commands=["alltrans"])
async def get_transs(message: types.Message):
    all_trans = get_all_trans()
    await message.answer(all_trans)

#########################################################################


@dp.message_handler(Admin(), commands=["add"])
async def add_accs(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ call:price:name:description")
    await state.set_state("get_")


@dp.message_handler(Admin(), state="get_")
async def get_account_info(message: types.Message, state: FSMContext):
    a = message.text.split(":")
    add_account(a[0], a[1], a[2], a[3])
    await message.answer(f"–ê–∫–∫–∞—É–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω:\n\ncallback: {a[0]}\nprice: {a[1]}\nname: {a[2]}\ndescription: {a[3]}")
    await state.finish()

###########################################################################


@dp.message_handler(Admin(), commands=["del"])
async def del_accs(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å callback –∞–∫–∫–∞—É–Ω—Ç–∞")
    await state.set_state("del_")


@dp.message_handler(Admin(), state="del_")
async def del_account_info(message: types.Message, state: FSMContext):
    remove_acc(message.text)
    await message.answer(f"–ê–∫–∫–∞—É–Ω—Ç {message.text} —É–¥–∞–ª–µ–Ω")
    await state.finish()

###########################################################################


@dp.message_handler(Admin(), commands=["wallet"])
async def start(message: types.Message):
    await message.answer(f"–ë–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞\nRUB: {my_wallet()[0]}\nUSD: {my_wallet()[1]}\nEUR: {my_wallet()[2]}", parse_mode=types.ParseMode.HTML)

###########################################################################


@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    add_user(message.from_user.id)
    await message.answer("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await message.answer(text=f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}üëã\n–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã standoff 2\n–ø–æ –≥–æ—Ä—è–∏–º —Ü–µ–Ω–∞–ºüî•\n–ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É\n–∏ –≤—ã–±–µ—Ä–∏ –ø–æ–Ω—Ä–∞–≤–∏—à–≤–∏–π—Å—è\n–î–ª—è –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω—É - @satamem\n (–æ–Ω –∑–∞–Ω–µ—Å–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–∑—É –≤ –±–∞–∑—É)\n\n–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫—É—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–∏—à–∏, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è",
                         reply_markup=menu(), parse_mode=ParseMode.HTML)


###########################################################################

@dp.callback_query_handler(text="profile")
async def profile(call: types.CallbackQuery):
    await call.answer(cache_time=5)
    await call.message.answer(f"–ò–º—è: {call.from_user.first_name}\nID: {call.from_user.id}\n–ü–æ–∫—É–ø–æ–∫ —Å–æ–≤–µ—Ä—à–∏–ª: 0\n–°—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫: 0 —Ä—É–±")


@dp.callback_query_handler(text="help")
async def help(call: types.CallbackQuery):
    await call.answer(cache_time=5)
    await call.message.answer("–ö–æ–Ω—Ç–∞–∫—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ:\n@satamem")


###########################################################################

@dp.callback_query_handler(text="back")
@dp.callback_query_handler(state="get_call", text="back")
@dp.callback_query_handler(text="show")
async def show(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await call.answer(cache_time=5)
    await call.message.answer("–í–æ—Ç –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤—ã–±–æ—Ä\n\n‚úÖ - –≤—ã–±–æ—Ä —Ä–µ–¥–∞–∫—Ü–∏–∏ –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —Å –Ω–∞–∏–ª—É—á—à–µ–π\n —Ü–µ–Ω–æ–π –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏\n\nüî• - —Ç–æ–ø –∞–∫–∫–∞—É–Ω—Ç—ã, –≤—ã—Å–æ–∫–∏–µ LVL, –º–Ω–æ–≥–æ MMR\n–í—ã–≥–æ–¥–Ω–∞—è —Ü–µ–Ω–∞\n\n–ù–∞–∂–º–∏ –Ω–∞ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è –∞–∫–∫–∞—É–Ω—Ç —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ",
                              reply_markup=show_price())
    await state.set_state("get_fcall")


@dp.callback_query_handler(state="get_fcall")
async def get_butt(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    acc_info = get_account(str(call.data))
    price = acc_info[1]
    name = acc_info[2]
    description = acc_info[3]
    await call.message.answer(f"–¶–µ–Ω–∞: {price}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}", reply_markup=approve(acc_info[0]))
    await state.set_state("get_call")


@dp.callback_query_handler(state="get_call")
async def get_butt(call: types.CallbackQuery, state: FSMContext):
    acc_info = get_account(str(call.data))
    price = acc_info[1]
    name = acc_info[2]
    bill_id = random_auth_code()
    bill = create_trans(amount=price, lifetime=30, comment=name, bill_id=bill_id)
    add_trans(call.message.from_user.id, bill_id)
    await call.message.answer(
        "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∫–∞—É—Ç–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å\n–°—á–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 30 –º–∏–Ω—É—Ç,\n –∏–Ω–∞—á–µ –æ–Ω —Å—Ç–∞–Ω–µ—Ç –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º",
        reply_markup=check_trans(bill.pay_url))
    await state.finish()

################################################################################


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã
@dp.callback_query_handler(text="done")
async def check_for_trans(call: types.CallbackQuery, state: FSMContext):
    number_trans = find_trans(call.message.from_user.id)
    print(number_trans)
    p2p = QiwiP2P(auth_key=qiwi_token)
    status = str(p2p.check(bill_id=number_trans).status)
    if status == "PAID":
        log = random_login_and_password()
        log = log.split(":")
        await call.message.answer(f"–°—É–ø–µ—Ä, –∑–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω‚úÖ\n–õ–æ–≥–∏–Ω: {log[0]}\n–ü–∞—Ä–æ–ª—å: {log[1]}")
    elif status == "REJECTED":
        await call.message.answer("‚ùå–ó–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω‚ùå")
        remove_trans(call.message.from_user.id)
        await state.set_state("get_call")
    else:
        await call.message.answer("‚õîÔ∏è–ó–ê–ö–ê–ó –ù–ï –û–ü–õ–ê–ß–ï–ù‚õîÔ∏è")


@dp.callback_query_handler(text="remove")
async def check_for_trans(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await call.message.answer("‚ùå–ó–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω‚ùå")
    remove_trans(call.message.from_user.id)
